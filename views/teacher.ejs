<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Teacher Dashboard | T.Nestia</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body {
      font-family: "Segoe UI", sans-serif;
      background: #161822;
      color: #fff;
      margin: 0;
    }
    header {
      background: #1f2230;
      padding: 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 6px rgba(0,0,0,0.4);
    }
    header h2 { margin: 0; }
    header a { color: #f87171; text-decoration: none; }

    main { max-width: 1100px; margin: 20px auto; padding: 0 16px; }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
      margin-bottom: 20px;
    }
    .card {
      background: #1f2230;
      border-radius: 12px;
      padding: 16px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.4);
    }
    .card h3 { margin-top: 0; margin-bottom: 12px; }
    .btn {
      background: #4ea1ff;
      color: #fff;
      border: none;
      border-radius: 8px;
      padding: 10px 14px;
      cursor: pointer;
      transition: 0.2s;
      margin-top: 6px;
    }
    .btn:hover { background: #3583d4; }
    table { width: 100%; border-collapse: collapse; }
    th, td { text-align: left; padding: 8px; border-bottom: 1px solid #2a2e40; font-size: 14px; }
    th { color: #9aa3b2; }
    input, textarea {
      width: 100%; padding: 10px;
      border-radius: 6px;
      border: none; margin: 6px 0;
      background: #2a2d3c; color: #fff;
    }
    .badge {
      padding: 4px 8px; border-radius: 6px;
      font-size: 12px; background: #2b2b38; color: #98c8f7;
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header>
    <h2>üë®‚Äçüè´ Welcome, <%= username %> (Teacher)</h2>
    <a href="/">Logout</a>
  </header>

  <main>
    <!-- Overview Cards -->
    <div class="grid">
      <div class="card"><h3>üìÇ Files Shared</h3><p id="stat-files">0</p></div>
      <div class="card"><h3>üìù Assignments</h3><p id="stat-assignments">0</p></div>
      <div class="card"><h3>üì¢ Announcements</h3><p id="stat-announcements">0</p></div>
      <div class="card"><h3>üë©‚Äçüéì Students</h3><p id="stat-students">12</p></div>
    </div>

    <!-- File Upload -->
    <div class="card">
      <h3>üì§ Upload Material</h3>
      <input id="fileInput" type="file" />
      <button class="btn" id="uploadBtn" onclick="submitUpload()">Upload</button>
      <p id="uploadMsg"></p>
    </div>

    <!-- Shared Files -->
    <div class="card">
      <h3>üìÅ Shared Files</h3>
      <div id="files"></div>
    </div>

    <!-- Assignments -->
    <div class="card">
      <h3>üìù Assignments</h3>
      <input id="assignTitle" type="text" placeholder="Assignment Title" />
      <input id="assignDeadline" type="date" />
      <textarea id="assignDesc" placeholder="Description"></textarea>
      <button class="btn" onclick="createAssignment()">Create Assignment</button>
      <div id="assignment-list"></div>
    </div>

    <!-- Announcements -->
    <div class="card">
      <h3>üì¢ Announcements</h3>
      <textarea id="announcementText" placeholder="Write announcement..."></textarea>
      <button class="btn" onclick="postAnnouncement()">Post</button>
      <ul id="announcement-list"></ul>
    </div>

    <!-- Students -->
    <div class="card">
      <h3>üë©‚Äçüéì My Students</h3>
      <table>
        <thead><tr><th>Name</th><th>Email</th><th>Status</th></tr></thead>
        <tbody>
          <tr><td>Rafi</td><td>rafi@example.com</td><td><span class="badge">Active</span></td></tr>
          <tr><td>Ayan</td><td>ayan@example.com</td><td><span class="badge">Active</span></td></tr>
          <tr><td>Sadia</td><td>sadia@example.com</td><td><span class="badge">Inactive</span></td></tr>
        </tbody>
      </table>
    </div>
  </main>

  <script>
    lucide.createIcons();

    /* ---------- FILE UPLOAD (existing backend logic) ---------- */
    async function submitUpload() {
      const inp = document.getElementById("fileInput");
      const msg = document.getElementById("uploadMsg");
      const btn = document.getElementById("uploadBtn");
      if (!inp.files[0]) return alert("Pick a file first");

      const fd = new FormData();
      fd.append("file", inp.files[0]);

      btn.disabled = true; msg.textContent = "Uploading...";
      try {
        const res = await fetch("/uploads", { method:"POST", body: fd });
        const data = await res.json();
        if (!res.ok) throw new Error(data.error || "Upload failed");
        msg.textContent = "‚úÖ Uploaded: " + data.file.originalName;
        inp.value = "";
        loadFiles();
      } catch (e) {
        console.error(e);
        msg.textContent = "‚ùå Upload failed";
      } finally {
        btn.disabled = false;
      }
    }

    async function loadFiles() {
      const wrap = document.getElementById("files");
      wrap.innerHTML = "Loading...";
      try {
        const res = await fetch("/uploads/files");
        const list = await res.json();
        if (!Array.isArray(list) || list.length === 0) {
          wrap.innerHTML = "<em>No files uploaded yet.</em>";
          document.getElementById("stat-files").textContent = "0";
          return;
        }
        document.getElementById("stat-files").textContent = list.length;
        let html = '<table><thead><tr><th>File</th><th>By</th><th>When</th><th></th></tr></thead><tbody>';
        list.forEach(f => {
          html += `
            <tr>
              <td><a href="${f.url}" target="_blank">${f.originalName}</a></td>
              <td>${f.uploadedByName}</td>
              <td>${new Date(f.uploadedAt).toLocaleString()}</td>
              <td><a href="/uploads/download/${f.id}">Download</a></td>
            </tr>`;
        });
        html += "</tbody></table>";
        wrap.innerHTML = html;
      } catch (e) {
        console.error(e);
        wrap.innerHTML = "Failed to load files";
      }
    }

  
  /* ---------- ASSIGNMENTS ---------- */
  async function createAssignment() {
    const title = document.getElementById("assignTitle").value.trim();
    const deadline = document.getElementById("assignDeadline").value;
    const desc = document.getElementById("assignDesc").value.trim();
    if (!title || !deadline) return alert("Title and deadline required");

    try {
      const res = await fetch("/assignments", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title, deadline, description: desc })
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error);
      loadAssignments();
    } catch (err) {
      alert("‚ùå Failed to create assignment");
    }
  }

  async function loadAssignments() {
    const list = document.getElementById("assignment-list");
    try {
      const res = await fetch("/assignments");
      const data = await res.json();
      document.getElementById("stat-assignments").textContent = data.length;
      if (!data.length) return (list.innerHTML = "<em>No assignments yet.</em>");
      let html = "<ul>";
      data.forEach(a => {
        html += `<li><strong>${a.title}</strong> (due ${new Date(a.deadline).toLocaleDateString()})<br>${a.description || ""}</li>`;
      });
      html += "</ul>";
      list.innerHTML = html;
    } catch (err) {
      list.innerHTML = "Failed to load assignments";
    }
  }

  /* ---------- ANNOUNCEMENTS ---------- */
  async function postAnnouncement() {
    const text = document.getElementById("announcementText").value.trim();
    if (!text) return alert("Write something first");

    try {
      const res = await fetch("/announcements", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text })
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error);
      loadAnnouncements();
      document.getElementById("announcementText").value = "";
    } catch (err) {
      alert("‚ùå Failed to post announcement");
    }
  }

  async function loadAnnouncements() {
    const ul = document.getElementById("announcement-list");
    try {
      const res = await fetch("/announcements");
      const data = await res.json();
      document.getElementById("stat-announcements").textContent = data.length;
      if (!data.length) return (ul.innerHTML = "<em>No announcements yet.</em>");
      ul.innerHTML = "";
      data.forEach(a => {
        const li = document.createElement("li");
        li.textContent = `${a.text} ‚Äî (${a.createdByName})`;
        ul.appendChild(li);
      });
    } catch (err) {
      ul.innerHTML = "Failed to load announcements";
    }
  }

  /* ---------- INIT ---------- */
  window.onload = function() {
    loadFiles();
    loadAssignments();
    loadAnnouncements();
  };


  </script>
</body>
</html>
